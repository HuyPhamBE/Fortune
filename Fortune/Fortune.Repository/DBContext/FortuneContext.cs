// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Fortune.Repository.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using Npgsql.EntityFrameworkCore.PostgreSQL;
namespace Fortune.Repository.DBContext;

public partial class FortuneContext : DbContext
{
    public FortuneContext()
    {
    }

    public FortuneContext(DbContextOptions<FortuneContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Mini_game> Mini_games { get; set; }

    public virtual DbSet<Plan> Plans { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<User> Users { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseNpgsql(GetConnectionString("DefaultConnection"))
              .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.booking_id).HasName("booking_booking_id_primary");

            entity.Property(e => e.booking_id).ValueGeneratedNever();

            entity.HasOne(d => d.user).WithMany(p => p.Bookings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("booking_user_id_foreign");
        });

        modelBuilder.Entity<Mini_game>(entity =>
        {
            entity.HasKey(e => e.miniGame_id).HasName("mini game_minigame_id_primary");

            entity.Property(e => e.miniGame_id).ValueGeneratedNever();

            entity.HasOne(d => d.booking).WithMany(p => p.Mini_games).HasConstraintName("mini game_booking_id_foreign");
        });

        modelBuilder.Entity<Plan>(entity =>
        {
            entity.HasKey(e => e.Plan_id).HasName("plan_plan_id_primary");

            entity.Property(e => e.Plan_id).ValueGeneratedNever();

            entity.HasOne(d => d.booking).WithMany(p => p.Plans)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("plan_booking_id_foreign");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.staff_id).HasName("staff_staff_id_primary");

            entity.Property(e => e.staff_id).ValueGeneratedNever();

            entity.HasOne(d => d.user).WithMany(p => p.Staff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("staff_user_id_foreign");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.user_id).HasName("user_user_id_primary");

            entity.Property(e => e.user_id).ValueGeneratedNever();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}